{"mappings":"ACgBA,SAAS,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MACxB,AAjBF,WACE,IAAM,EAAO,IAAI,UAAU,SAAS,gBAAgB,CAAC,wCAAyC,CAC5F,MAAO,eACP,QAAS,MACX,GAEA,KAAK,GAAG,CAAC,EAAI,KAAK,CAAE,CAAE,SAAU,GAAI,GAEpC,KAAK,EAAE,CAAC,EAAI,KAAK,CAAE,CACjB,SAAU,EACV,QAAS,IACT,MAAO,GACP,KAAM,YACR,EACF,GAIA,GA8CA,SAAS,gBAAgB,CAAC,mBAAoB,KAvC5C,AAFsB,SAAS,gBAAgB,CAAC,kBAElC,OAAO,CAAC,AAAC,IAErB,IAAM,EAAa,EAAG,WAAW,CAAC,IAAI,GAGhC,EAAkB,WAAW,EAAW,OAAO,CAAC,KAAM,KAGtD,EAAgB,EAAW,QAAQ,CAAC,KACtC,EAAW,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAC/B,EAGA,MAAM,KAGV,KAAK,GAAG,CAAC,EAAI,CAAE,YAAa,CAAE,GAC9B,KAAK,EAAE,CAAC,EAAI,CACV,YAAa,EACb,cAAe,CACb,QAAS,EACT,MAAO,aACP,KAAM,CAAA,CACR,EACA,SAAU,EACV,KAAM,aACN,KAAM,CAAE,YAAa,KAAK,GAAG,CAAC,GAAI,CAAC,EAAe,EAClD,SAAU,WAER,EAAG,WAAW,CAAG,WAAW,EAAG,WAAW,EAAE,cAAc,CAAC,KAAA,EAAW,CACpE,sBAAuB,EACvB,sBAAuB,CACzB,EACF,CACF,GACF,EAMF","sources":["<anon>","src/whyWebflow.js"],"sourcesContent":["(() => {\nfunction $5ceef45ebf251cff$var$initIntroAnimation() {\n    const els = new SplitType(document.querySelectorAll(\".section.hero-internal .heading-span\"), {\n        types: \"lines, words\",\n        tagName: \"span\"\n    });\n    gsap.set(els.words, {\n        yPercent: 100\n    });\n    gsap.to(els.words, {\n        yPercent: 0,\n        stagger: 0.05,\n        delay: 0.5,\n        ease: \"power4.out\"\n    });\n}\ndocument.fonts.ready.then(()=>{\n    $5ceef45ebf251cff$var$initIntroAnimation();\n});\n// Function to initialize the count-up animation\nfunction $5ceef45ebf251cff$var$initializeCountUpAnimations() {\n    // Select all elements with the \"count-number\" tag\n    const countElements = document.querySelectorAll(\"[count-number]\");\n    countElements.forEach((el)=>{\n        // Get the number value from the element's text\n        const targetText = el.textContent.trim();\n        // Normalize the number by replacing commas with dots (if necessary) and parsing it\n        const normalizedValue = parseFloat(targetText.replace(/,/g, \"\"));\n        // Determine the number of decimal places\n        const decimalPlaces = targetText.includes(\".\") ? targetText.split(\".\")[1].length : 0;\n        // Skip if the value is not a valid number\n        if (isNaN(normalizedValue)) return;\n        // Create a GSAP ScrollTrigger animation\n        gsap.set(el, {\n            textContent: 0\n        });\n        gsap.to(el, {\n            textContent: normalizedValue,\n            scrollTrigger: {\n                trigger: el,\n                start: \"top bottom\",\n                once: true\n            },\n            duration: 2,\n            ease: \"power2.out\",\n            snap: {\n                textContent: Math.pow(10, -decimalPlaces)\n            },\n            onUpdate: function() {\n                // Format the number dynamically during the animation\n                el.textContent = parseFloat(el.textContent).toLocaleString(undefined, {\n                    minimumFractionDigits: decimalPlaces,\n                    maximumFractionDigits: decimalPlaces\n                });\n            }\n        });\n    });\n}\n// Initialize the count-up animations when the page loads\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    $5ceef45ebf251cff$var$initializeCountUpAnimations();\n});\n\n})();\n//# sourceMappingURL=whyWebflow.js.map\n","function initIntroAnimation() {\n  const els =  new SplitType(document.querySelectorAll('.section.hero-internal .heading-span'), {\n    types: \"lines, words\",\n    tagName: \"span\",\n  });\n\n  gsap.set(els.words, { yPercent: 100 });\n\n  gsap.to(els.words, {\n    yPercent: 0,\n    stagger: 0.05,\n    delay: 0.5,\n    ease: \"power4.out\"\n  });\n}\n\ndocument.fonts.ready.then(() => {\n  initIntroAnimation();\n});\n\n// Function to initialize the count-up animation\nfunction initializeCountUpAnimations() {\n  // Select all elements with the \"count-number\" tag\n  const countElements = document.querySelectorAll(\"[count-number]\");\n\n  countElements.forEach((el) => {\n    // Get the number value from the element's text\n    const targetText = el.textContent.trim();\n\n    // Normalize the number by replacing commas with dots (if necessary) and parsing it\n    const normalizedValue = parseFloat(targetText.replace(/,/g, ''));\n\n    // Determine the number of decimal places\n    const decimalPlaces = targetText.includes('.')\n      ? targetText.split('.')[1].length\n      : 0;\n\n    // Skip if the value is not a valid number\n    if (isNaN(normalizedValue)) return;\n\n    // Create a GSAP ScrollTrigger animation\n    gsap.set(el, { textContent: 0 });\n    gsap.to(el, {\n      textContent: normalizedValue,\n      scrollTrigger: {\n        trigger: el, // Trigger the animation when the element scrolls into view\n        start: \"top bottom\", // Start when the top of the element hits the bottom of the viewport\n        once: true, // Animate only once\n      },\n      duration: 2, // Animation duration\n      ease: \"power2.out\",\n      snap: { textContent: Math.pow(10, -decimalPlaces) }, // Snap to the nearest decimal place\n      onUpdate: function () {\n        // Format the number dynamically during the animation\n        el.textContent = parseFloat(el.textContent).toLocaleString(undefined, {\n          minimumFractionDigits: decimalPlaces,\n          maximumFractionDigits: decimalPlaces,\n        });\n      },\n    });\n  });\n}\n\n// Initialize the count-up animations when the page loads\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  initializeCountUpAnimations();\n});\n"],"names":["document","fonts","ready","then","$5ceef45ebf251cff$var$initIntroAnimation","els","SplitType","querySelectorAll","types","tagName","gsap","set","words","yPercent","to","stagger","delay","ease","addEventListener","countElements","forEach","el","targetText","textContent","trim","normalizedValue","parseFloat","replace","decimalPlaces","includes","split","length","isNaN","scrollTrigger","trigger","start","once","duration","snap","Math","pow","onUpdate","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits"],"version":3,"file":"whyWebflow.js.map"}