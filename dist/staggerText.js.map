{"mappings":"I,E,E,E,E,E,C,E,E,C,E,O,E,C,E,Y,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECAO,SAAS,EAAgB,CAAK,CAAE,CAAQ,EAE7C,EAAM,OAAO,CAAC,AAAA,IACZ,IAAM,EAAU,SAAS,aAAa,CAAC,QACvC,EAAQ,SAAS,CAAC,GAAG,CAAC,gBACtB,EAAK,UAAU,CAAC,YAAY,CAAC,EAAS,GACtC,EAAQ,WAAW,CAAC,EACtB,GAEwB,YAApB,OAAO,GACT,GAEJ,C,O,c,C,E,O,C,kB,C,I,I,E,I,K,E,W,C,E,a,C,C,E,G,E","sources":["<anon>","src/modules/setLinesWrapper.js","src/staggerText.js"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5d03\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5d03\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"2rxJM\", function(module, exports) {\n\n$parcel$export(module.exports, \"setLinesWrapper\", () => $1c7845f0e1de0887$export$8f060496e19d4bbb);\nfunction $1c7845f0e1de0887$export$8f060496e19d4bbb(lines, callback) {\n    // Wrap each line in a .line-wrapper span\n    lines.forEach((line)=>{\n        const wrapper = document.createElement(\"span\");\n        wrapper.classList.add(\"line-wrapper\");\n        line.parentNode.insertBefore(wrapper, line);\n        wrapper.appendChild(line);\n    });\n    if (typeof callback === \"function\") callback();\n}\n\n});\n\n\nvar $2rxJM = parcelRequire(\"2rxJM\");\n// Link timelines to scroll position\nfunction $c4b4b18bca9a2e02$var$createScrollTrigger(triggerElement, elements, start, end, withScroll) {\n    const scrollTrigger = {\n        trigger: triggerElement,\n        scrub: true,\n        start: start\n    };\n    if (!withScroll) {\n        trigger.onEnter = ()=>{\n            gsap.to(elements, {\n                yPercent: 0,\n                stagger: 0.2,\n                duration: 2,\n                ease: \"power4.Out\"\n            });\n        };\n        gsap.timeline({\n            scrollTrigger: trigger\n        });\n    } else {\n        trigger.end = end;\n        gsap.timeline({\n            scrollTrigger: trigger\n        }).to(words, {\n            yPercent: 0,\n            stagger: 0.2,\n            duration: 2,\n            ease: \"none\"\n        });\n    }\n}\nfunction $c4b4b18bca9a2e02$export$1601281ad392a6d8() {\n    // Split all words on the brand core section\n    const staggerTextEls = new SplitType(\"[stagger-text]\", {\n        types: \"lines, words\",\n        tagName: \"span\"\n    });\n    (0, $2rxJM.setLinesWrapper)(staggerTextEls.lines, ()=>{\n        gsap.set(\"[stagger-text] .word\", {\n            yPercent: 100\n        });\n    });\n    const textBlocks = document.querySelectorAll(\"[stagger-text]\");\n    textBlocks.forEach((el)=>{\n        const words1 = el.querySelectorAll(\".word\"), startVal = el.dataset.startPos || \"top top\", endVal = el.dataset.endPos || \"bottom center\", withScrollTrigger = el.dataset.withScroll || false;\n        // let tl = gsap.timeline({ paused: true });\n        $c4b4b18bca9a2e02$var$createScrollTrigger(el, words1, startVal, endVal, withScrollTrigger);\n    });\n}\n\n})();\n//# sourceMappingURL=staggerText.js.map\n","export function setLinesWrapper(lines, callback) {\n  // Wrap each line in a .line-wrapper span\n  lines.forEach(line => {\n    const wrapper = document.createElement('span');\n    wrapper.classList.add('line-wrapper');\n    line.parentNode.insertBefore(wrapper, line);\n    wrapper.appendChild(line);\n  });\n\n  if (typeof callback === 'function') {\n    callback();\n  }\n}","import { setLinesWrapper } from \"./modules/setLinesWrapper\";\n\n// Link timelines to scroll position\nfunction createScrollTrigger(triggerElement, elements, start, end, withScroll) {\n  const scrollTrigger = {\n    trigger: triggerElement,\n    scrub: true,\n    start,\n  };\n\n  if (!withScroll) {\n    trigger.onEnter = () => {\n      gsap.to(elements, {\n        yPercent: 0,\n        stagger: 0.2,\n        duration: 2,\n        ease: \"power4.Out\",\n      });\n    };\n\n    gsap.timeline({ scrollTrigger: trigger });\n  } else {\n    trigger.end = end;\n    gsap\n      .timeline({\n        scrollTrigger: trigger,\n      })\n      .to(words, {\n        yPercent: 0,\n        stagger: 0.2,\n        duration: 2,\n        ease: \"none\",\n      });\n  }\n}\n\nexport function setStaggerText() {\n  // Split all words on the brand core section\n  const staggerTextEls = new SplitType(\"[stagger-text]\", {\n    types: \"lines, words\",\n    tagName: \"span\",\n  });\n\n  setLinesWrapper(staggerTextEls.lines, () => {\n    gsap.set(\"[stagger-text] .word\", { yPercent: 100 });\n  });\n\n  const textBlocks = document.querySelectorAll(\"[stagger-text]\");\n\n  textBlocks.forEach((el) => {\n    const words = el.querySelectorAll(\".word\"),\n      startVal = el.dataset.startPos || \"top top\",\n      endVal = el.dataset.endPos || \"bottom center\",\n      withScrollTrigger = el.dataset.withScroll || false;\n    // let tl = gsap.timeline({ paused: true });\n    createScrollTrigger(el, words, startVal, endVal, withScrollTrigger);\n  });\n}\n"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","globalThis","id","exports","init","module","call","err","Error","code","register","parcelRegister","$1c7845f0e1de0887$export$8f060496e19d4bbb","lines","callback","forEach","line","wrapper","document","createElement","classList","add","parentNode","insertBefore","appendChild","Object","defineProperty","get","set","s","enumerable","configurable"],"version":3,"file":"staggerText.js.map"}